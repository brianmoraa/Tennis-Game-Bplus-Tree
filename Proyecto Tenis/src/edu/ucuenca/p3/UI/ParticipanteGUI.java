/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ucuenca.p3.UI;

import edu.ucuenca.p3.DAO.ParticipanteDAO;
import edu.ucuenca.p3.DAO.exceptions.ParticipanteExistenteException;
import edu.ucuenca.p3.DAO.exceptions.ParticipanteNoExistenteException;
import edu.ucuenca.p3.Modulos.Club;
import edu.ucuenca.p3.Modulos.Jugador;
import edu.ucuenca.p3.Modulos.Participante;
import edu.ucuenca.p3.SRV.ClubSRV;
import edu.ucuenca.p3.SRV.ParticipantesSRV;
import edu.ucuenca.p3.SRV.exceptions.CedulaValidacionException;
import edu.ucuenca.p3.SRV.exceptions.ClubDatosVaciosException;
import edu.ucuenca.p3.SRV.exceptions.ClubNotSelectedException;
import edu.ucuenca.p3.SRV.exceptions.EdadErroneaException;
import edu.ucuenca.p3.SRV.exceptions.ParticipantesDatosError;
import edu.ucuenca.p3.SRV.exceptions.ParticipantesDatosVaciosException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author andre
 */
public class ParticipanteGUI extends javax.swing.JPanel {
//    List<Participante> listaParticipante;

    /**
     * Creates new form ParticipanteGUI
     */
    public ParticipanteGUI() {
        initComponents();

//        listaParticipante = new ArrayList<>();
        bloquearCampos();

        cargarClubes();

        txtCodigo.requestFocus();
        ParticipantesSRV participanteSrv = new ParticipantesSRV();
        participanteSrv.cargarDatosArchivo();
//        tabla_Jugadores();
        clear_Table(jTable1);
        tabla_jugadores_Archivos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    public void limpiarCampos() {
        txtCodigo.setEnabled(true);
        txtCodigo.setText("");
        txtNombre.setText("");
        txtApellido.setText("");
        txtEdad.setText("");
        txtRanking.setText("");

        btnCrear.setEnabled(true);
        btnEliminar.setEnabled(false);
        btnModificar.setEnabled(false);
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtEdad = new javax.swing.JTextField();
        comboClub = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtCodigo = new javax.swing.JTextField();
        btnCrear = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtRanking = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(764, 695));
        setMinimumSize(new java.awt.Dimension(764, 695));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(764, 695));
        setLayout(null);

        jLabel1.setFont(new java.awt.Font("Impact", 0, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Gestionar Participantes");
        add(jLabel1);
        jLabel1.setBounds(620, 30, 300, 41);

        jLabel2.setText("Código/ Cédula:");
        add(jLabel2);
        jLabel2.setBounds(430, 110, 103, 29);

        jLabel3.setText("Nombre:");
        add(jLabel3);
        jLabel3.setBounds(430, 150, 103, 29);

        jLabel4.setText("Apellido:");
        add(jLabel4);
        jLabel4.setBounds(830, 150, 100, 29);

        jLabel5.setText("Edad:");
        add(jLabel5);
        jLabel5.setBounds(430, 200, 77, 27);

        jLabel6.setText("Club:");
        add(jLabel6);
        jLabel6.setBounds(830, 200, 89, 20);
        add(txtNombre);
        txtNombre.setBounds(550, 150, 143, 29);
        add(txtApellido);
        txtApellido.setBounds(960, 150, 139, 29);
        add(txtEdad);
        txtEdad.setBounds(550, 200, 143, 27);

        comboClub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboClubActionPerformed(evt);
            }
        });
        add(comboClub);
        comboClub.setBounds(960, 200, 139, 27);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre", "Apellido", "Edad", "Club", "Ranking"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(jPanel1);
        jPanel1.setBounds(420, 350, 680, 274);
        add(txtCodigo);
        txtCodigo.setBounds(550, 110, 143, 29);

        btnCrear.setText("Crear");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });
        add(btnCrear);
        btnCrear.setBounds(420, 270, 114, 39);

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        add(btnModificar);
        btnModificar.setBounds(590, 270, 111, 39);

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        add(btnEliminar);
        btnEliminar.setBounds(780, 270, 110, 39);

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        add(btnLimpiar);
        btnLimpiar.setBounds(970, 270, 129, 39);

        jLabel7.setText("Ranking:");
        add(jLabel7);
        jLabel7.setBounds(830, 110, 70, 14);
        add(txtRanking);
        txtRanking.setBounds(960, 110, 139, 29);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ucuenca/p3/Iconos/fondo2.gif"))); // NOI18N
        add(jLabel8);
        jLabel8.setBounds(0, 0, 1210, 660);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed

        try {
            String nombre = txtNombre.getText();
            String apellido = txtApellido.getText();
            int edad = Integer.parseInt(txtEdad.getText());
            String cedula = txtCodigo.getText().trim();
            String club1 = comboClub.getSelectedItem().toString();
            float puntos = Float.parseFloat(txtRanking.getText());
            String tipo = "";

            ParticipantesSRV participanteSrv = new ParticipantesSRV();

            ClubSRV clubService = new ClubSRV();
//            Club clubb = club.obtenerClub_Nombre(club1);
            //System.out.println("----------" + club.obtenerClub(club1).getNombre());
            Club club = clubService.obtenerClub_Nombre_Archivos(club1);

            if (participanteSrv.existeJugador(cedula) == false) {
                participanteSrv.registrarJugador(cedula, nombre, apellido, edad, club, tipo, puntos);

                //implementado brian
                //participanteSrv.actualizarDatosParticipante();//
                clear_Table(jTable1);
//            tabla_Jugadores();
                tabla_jugadores_Archivos();
                JOptionPane.showMessageDialog(null, "Participante creado exitosamente.");

                limpiarCampos();

                txtCodigo.requestFocus();
            } else {
                JOptionPane.showMessageDialog(null, "El jugador con cedula " + cedula + " ya existe.");
            }

        } catch (ParticipantesDatosVaciosException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (CedulaValidacionException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (EdadErroneaException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (ParticipantesDatosError ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (ClubNotSelectedException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Ranking y edad deben contener solo números.");
        }
    }//GEN-LAST:event_btnCrearActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        try {
            String nombre = txtNombre.getText();
            String apellido = txtApellido.getText();
            int edad = Integer.parseInt(txtEdad.getText());
            String cedula = txtCodigo.getText();
            String club1 = (String) comboClub.getSelectedItem();
            float puntos = Float.parseFloat(txtRanking.getText());
            String tipo = "";
            ParticipantesSRV participanteSrv = new ParticipantesSRV();
            ClubSRV clubService = new ClubSRV();
            Club club = clubService.obtenerClub_Nombre_Archivos(club1);

            participanteSrv.modificarParticipanteArchivos(cedula, nombre, apellido, edad, club, tipo, puntos);
            limpiarCampos();
            btnLimpiarActionPerformed(evt);
            clear_Table(jTable1);
            tabla_jugadores_Archivos();
            
            bloquearCampos();
            txtCodigo.requestFocus();
            
            JOptionPane.showMessageDialog(null, "Participante modificado exitosamente.");
        } catch (CedulaValidacionException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (ParticipantesDatosVaciosException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (EdadErroneaException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (ParticipantesDatosError ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (ClubNotSelectedException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
//        bloquearCampos();
//        clear_Table(jTable1);
//        tabla_Jugadores();
//        JOptionPane.showMessageDialog(this, "Participante modificado exitosamente.");

    }//GEN-LAST:event_btnModificarActionPerformed

    private void clear_Table(JTable jTableVigilante) {
        DefaultTableModel modeloVigia = (DefaultTableModel) jTableVigilante.getModel();
        for (int i = 0; i < jTableVigilante.getRowCount(); i++) {
            modeloVigia.removeRow(i);
            i -= 1;
        }
    }

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try {

            String cedula = txtCodigo.getText();
            int posicion = jTable1.getSelectedRow();
            ParticipantesSRV participante = new ParticipantesSRV();
            participante.eliminarParticipante(cedula, posicion);
            JOptionPane.showMessageDialog(null, "El participante ha sido eliminado del registro !");
            limpiarCampos();
            bloquearCampos();

            clear_Table(jTable1);
//            tabla_Jugadores();
            tabla_jugadores_Archivos();

            btnLimpiarActionPerformed(evt);
        } catch (ParticipantesDatosVaciosException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (CedulaValidacionException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (ParticipanteNoExistenteException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (EdadErroneaException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (ParticipantesDatosError ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (ClubNotSelectedException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarCampos();
        bloquearCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        if (evt.getClickCount() > 1) {
            try {

                String idParticipante = (String) jTable1.getValueAt(jTable1.getSelectedRow(), 0);
                ParticipantesSRV participantesrv = new ParticipantesSRV();
//                Participante participante = participantesrv.getparticipanteArchivos(idParticipante);
                Participante participante = participantesrv.obtenerParticipante(idParticipante);
                Jugador jugador = (Jugador) participante;

                txtNombre.setText(jugador.getNombre());
                txtApellido.setText(jugador.getApellido());
                txtEdad.setText(String.valueOf(jugador.getEdad()));
                txtCodigo.setText(jugador.getCodigo());
                comboClub.setSelectedItem(jugador.getClub());
                txtRanking.setText(String.valueOf(jugador.getRanking().getPuntos()));

                btnCrear.setEnabled(false);
                btnModificar.setEnabled(true);
                btnEliminar.setEnabled(true);

                txtCodigo.setEnabled(false);
                txtNombre.setEnabled(true);
                txtApellido.setEnabled(true);
                txtEdad.setEnabled(true);
                txtRanking.setEnabled(false);
                comboClub.setEnabled(true);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error al seleccionar datos.");
            }
        }
    }//GEN-LAST:event_jTable1MousePressed

    private void comboClubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboClubActionPerformed

    }//GEN-LAST:event_comboClubActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JComboBox comboClub;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtEdad;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtRanking;
    // End of variables declaration//GEN-END:variables
//ver como funciona el sort

    private String idClienteSeleccionada;

    private void bloquearCampos() {
        //jButton_Crear.setEnabled(false);       
        txtCodigo.setEnabled(true);
        txtNombre.setEnabled(true);
        txtApellido.setEnabled(true);
        txtEdad.setEnabled(true);
        txtRanking.setEnabled(true);
        comboClub.setEnabled(true);

        btnModificar.setEnabled(false);
        btnEliminar.setEnabled(false);
    }

    private void tabla_Jugadores() {
        DefaultTableModel modeloVigia = (DefaultTableModel) jTable1.getModel();
        ParticipantesSRV participantesrv = new ParticipantesSRV();
        List<Participante> listaParticipantes = participantesrv.listaParticipantes();

        Object[] fila = new Object[modeloVigia.getColumnCount()];
        for (int i = 0; i < listaParticipantes.size(); i++) {
            Jugador jugador = (Jugador) listaParticipantes.get(i);

            fila[0] = jugador.getCodigo();
            fila[1] = jugador.getNombre().toUpperCase();
            fila[2] = jugador.getApellido().toUpperCase();
            fila[3] = jugador.getEdad();
            fila[4] = jugador.getClub().getNombre();
            fila[5] = jugador.getRanking().getPuntos();//error aqui

            modeloVigia.addRow(fila);
        }
    }

    private void tabla_jugadores_Archivos() {
        DefaultTableModel modeloVigia = (DefaultTableModel) jTable1.getModel();
        ParticipantesSRV participantesrv = new ParticipantesSRV();
//        List<Participante> listaParticipantes = participantesrv.listaParticipantes();

        ArrayList<Participante> listaParticipantes = participantesrv.listarParticpantesArchivos();
        Object[] fila = new Object[modeloVigia.getColumnCount()];
        for (int i = 0; i < listaParticipantes.size(); i++) {
            Jugador jugador = (Jugador) listaParticipantes.get(i);

            fila[0] = jugador.getCodigo();
            fila[1] = jugador.getNombre().toUpperCase();
            fila[2] = jugador.getApellido().toUpperCase();
            fila[3] = jugador.getEdad();
            fila[4] = jugador.getClub().getNombre();
            fila[5] = jugador.getRanking().getPuntos();//error aqui

            modeloVigia.addRow(fila);
        }
    }

    private void cargarClubes() {
        ClubSRV clubsrv = new ClubSRV();
        ArrayList<Club> listaClubes = clubsrv.listarClubArchivos();

        for (Club club : listaClubes) {
            comboClub.addItem(club.getNombre());
        }
    }
}
